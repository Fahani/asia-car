// Code generated by MockGen. DO NOT EDIT.
// Source: vehicle_write_repository.go

// Package mock_vehicle_write_repostiroy is a generated GoMock package.
package mock_vehicle_write_repostiroy

import (
	reflect "reflect"

	aggregate "github.com/fahani/asia-car/src/domain/vehicle/write-model/aggregate"
	gomock "github.com/golang/mock/gomock"
)

// MockVehicleWriteRepository is a mock of VehicleWriteRepository interface.
type MockVehicleWriteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleWriteRepositoryMockRecorder
}

// MockVehicleWriteRepositoryMockRecorder is the mock recorder for MockVehicleWriteRepository.
type MockVehicleWriteRepositoryMockRecorder struct {
	mock *MockVehicleWriteRepository
}

// NewMockVehicleWriteRepository creates a new mock instance.
func NewMockVehicleWriteRepository(ctrl *gomock.Controller) *MockVehicleWriteRepository {
	mock := &MockVehicleWriteRepository{ctrl: ctrl}
	mock.recorder = &MockVehicleWriteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleWriteRepository) EXPECT() *MockVehicleWriteRepositoryMockRecorder {
	return m.recorder
}

// PutVehicle mocks base method.
func (m *MockVehicleWriteRepository) PutVehicle(vehicle aggregate.Vehicle) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutVehicle", vehicle)
}

// PutVehicle indicates an expected call of PutVehicle.
func (mr *MockVehicleWriteRepositoryMockRecorder) PutVehicle(vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutVehicle", reflect.TypeOf((*MockVehicleWriteRepository)(nil).PutVehicle), vehicle)
}
