// Code generated by MockGen. DO NOT EDIT.
// Source: vehicle_read_repository.go

// Package mock_vehicle_read_repostiroy is a generated GoMock package.
package mock_vehicle_read_repostiroy

import (
	reflect "reflect"

	vehicle_aggregate "github.com/fahani/asia-car/src/domain/vehicle/write-model/aggregate"
	chassis_nbr "github.com/fahani/asia-car/src/domain/vehicle/write-model/vo/chassis-nbr"
	device_serial_number "github.com/fahani/asia-car/src/domain/vehicle/write-model/vo/device-serial-number"
	gomock "github.com/golang/mock/gomock"
)

// MockVehicleReadRepository is a mock of VehicleReadRepository interface.
type MockVehicleReadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleReadRepositoryMockRecorder
}

// MockVehicleReadRepositoryMockRecorder is the mock recorder for MockVehicleReadRepository.
type MockVehicleReadRepositoryMockRecorder struct {
	mock *MockVehicleReadRepository
}

// NewMockVehicleReadRepository creates a new mock instance.
func NewMockVehicleReadRepository(ctrl *gomock.Controller) *MockVehicleReadRepository {
	mock := &MockVehicleReadRepository{ctrl: ctrl}
	mock.recorder = &MockVehicleReadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleReadRepository) EXPECT() *MockVehicleReadRepositoryMockRecorder {
	return m.recorder
}

// GetVehicleByChassisNbr mocks base method.
func (m *MockVehicleReadRepository) GetVehicleByChassisNbr(chassisNbr chassis_nbr.ChassisNbr) (vehicle_aggregate.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleByChassisNbr", chassisNbr)
	ret0, _ := ret[0].(vehicle_aggregate.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleByChassisNbr indicates an expected call of GetVehicleByChassisNbr.
func (mr *MockVehicleReadRepositoryMockRecorder) GetVehicleByChassisNbr(chassisNbr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleByChassisNbr", reflect.TypeOf((*MockVehicleReadRepository)(nil).GetVehicleByChassisNbr), chassisNbr)
}

// GetVehicleByDeviceSerialNbr mocks base method.
func (m *MockVehicleReadRepository) GetVehicleByDeviceSerialNbr(deviceSerialNumber device_serial_number.DeviceSerialNumber) (vehicle_aggregate.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleByDeviceSerialNbr", deviceSerialNumber)
	ret0, _ := ret[0].(vehicle_aggregate.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleByDeviceSerialNbr indicates an expected call of GetVehicleByDeviceSerialNbr.
func (mr *MockVehicleReadRepositoryMockRecorder) GetVehicleByDeviceSerialNbr(deviceSerialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleByDeviceSerialNbr", reflect.TypeOf((*MockVehicleReadRepository)(nil).GetVehicleByDeviceSerialNbr), deviceSerialNumber)
}
